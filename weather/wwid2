import pandas as pd
import numpy as np
import statsmodels.api as sm
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import roc_auc_score

# Load the Pima Indians Diabetes Dataset
url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv"
column_names = ["Pregnancies", "Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI", "DiabetesPedigreeFunction", "Age", "Outcome"]
df = pd.read_csv(url, names=column_names)

# Define the independent variables (5 variables) and dependent variable
X = df[["Glucose", "BMI", "Age", "Pregnancies", "DiabetesPedigreeFunction"]]
y = df["Outcome"]

# Add a constant to the independent variables (for the intercept)
X = sm.add_constant(X)

# Initialize lists to store results
coefficients = []
ginis = []

# Bootstrapping loop (1000 iterations)
n_iterations = 1000
for i in range(n_iterations):
    # Sample with replacement
    sample_indices = np.random.choice(X.index, size=len(X), replace=True)
    X_sample = X.iloc[sample_indices]
    y_sample = y.iloc[sample_indices]
    
    # Fit logistic regression model
    model = sm.Logit(y_sample, X_sample)
    result = model.fit(disp=0)
    
    # Save coefficients
    coefficients.append(result.params)
    
    # Calculate Gini index (2 * AUC - 1)
    y_pred_prob = result.predict(X_sample)
    auc = roc_auc_score(y_sample, y_pred_prob)
    gini = 2 * auc - 1
    ginis.append(gini)

# Convert results to DataFrames
coefficients_df = pd.DataFrame(coefficients, columns=X.columns)
ginis_df = pd.Series(ginis, name="Gini")

# Plot the distribution of coefficients
plt.figure(figsize=(12, 8))
for column in coefficients_df.columns:
    sns.kdeplot(coefficients_df[column], label=column)
plt.title("Distribution of Bootstrapped Coefficients")
plt.xlabel("Coefficient Value")
plt.ylabel("Density")
plt.legend()
plt.show()

# Plot the distribution of Gini indices
plt.figure(figsize=(8, 6))
sns.kdeplot(ginis_df, label="Gini Index")
plt.title("Distribution of Bootstrapped Gini Indices")
plt.xlabel("Gini Index")
plt.ylabel("Density")
plt.legend()
plt.show()

# Print summary statistics
print("Coefficient Summary Statistics:")
print(coefficients_df.describe())
print("\nGini Index Summary Statistics:")
print(ginis_df.describe())
