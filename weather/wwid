import pandas as pd
from sklearn.model_selection import train_test_split

def stratified_split_by_obligor(df, target_col, obligor_col, test_size=0.3, random_state=42):
    """
    Split the dataframe into two parts, ensuring that all observations of the same obligor 
    are assigned to the same split. The split is stratified by the target binary variable.

    Parameters:
    - df: DataFrame containing the data.
    - target_col: String, name of the column containing the binary target variable (e.g., 'target').
    - obligor_col: String, name of the column containing the obligor identifier.
    - test_size: Float, proportion of the data to include in the test split (default is 0.3).
    - random_state: Integer, seed for random number generator for reproducibility.

    Returns:
    - train_df: DataFrame with the training split.
    - test_df: DataFrame with the testing split.
    """
    # Step 1: Group by obligor and get the stratified split
    obligors = df[obligor_col].unique()
    
    # Split the obligors into train and test groups, stratified by the target variable
    train_obligors, test_obligors = train_test_split(
        obligors, 
        test_size=test_size, 
        stratify=df.groupby(obligor_col)[target_col].apply(lambda x: x.mode()[0]), 
        random_state=random_state
    )
    
    # Step 2: Filter the dataframe by the split obligors
    train_df = df[df[obligor_col].isin(train_obligors)]
    test_df = df[df[obligor_col].isin(test_obligors)]
    
    return train_df, test_df
