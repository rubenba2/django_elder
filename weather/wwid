def calculate_similarity(psi_df, pai_df):
    # Merge the PSI and PAI dataframes on 'Variable'
    merged_df = pd.merge(psi_df, pai_df, on='Variable')

    # Calculate similarity based on the provided logic
    def similarity_status(row):
        if row['PSI Status'] == 'Green' and row['PAI Status'] == 'Green':
            return 'Green'
        elif (row['PSI Status'] == 'Amber' and row['PAI Status'] == 'Amber') or \
             (row['PSI Status'] == 'Green' and row['PAI Status'] == 'Red') or \
             (row['PSI Status'] == 'Red' and row['PAI Status'] == 'Green'):
            return 'Amber'
        else:
            return 'Red'

    # Apply similarity function
    merged_df['Similarity'] = merged_df.apply(similarity_status, axis=1)

    return merged_df

# Example Usage:

# Assume psi_results and pai_results dataframes are already available from previous calculations.
# Example: 
# psi_results = pd.DataFrame({'Variable': ['var1', 'var2', 'var3'], 'PSI': [0.1, 0.15, 0.35], 'PSI Status': ['Green', 'Amber', 'Red']})
# pai_results = pd.DataFrame({'Variable': ['var1', 'var2', 'var3'], 'PAI': [1.1, 1.3, 1.7], 'PAI Status': ['Green', 'Amber', 'Red']})

final_results = calculate_similarity(psi_results, pai_results)

# Display final table
print(final_results)
