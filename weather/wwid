import pandas as pd
from rapidfuzz.process import extractOne

# Sample DataFrame
data = {
    'id': [1, 2, 3, 4, 5],
    'text': ["apple pie", "apple-pie", "banana bread", "bananas bread", "cherry tart"]
}

df = pd.DataFrame(data)

# Function to group similar text
def find_similar_groups(df, threshold=80):
    groups = []
    assigned = set()

    for i, text in enumerate(df['text']):
        if i in assigned:
            continue
        
        group = [i]  # Start a new group
        assigned.add(i)

        for j, other_text in enumerate(df['text']):
            if j in assigned:
                continue
            
            # Compute similarity
            match_score = extractOne(other_text, [text])[1]
            if match_score >= threshold:  # If similarity is high enough
                group.append(j)
                assigned.add(j)
        
        groups.append(group)

    # Assign group labels
    group_map = {}
    for group_id, indices in enumerate(groups):
        for idx in indices:
            group_map[idx] = group_id

    df['group'] = df.index.map(group_map)
    return df

# Group rows by similarity
df_grouped = find_similar_groups(df, threshold=80)

print(df_grouped)
