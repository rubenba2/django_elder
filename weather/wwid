import pandas as pd
import numpy as np

def migration_percentages(df, period_months=12):
    # Ensure 'cohort_date' is in datetime format
    df['cohort_date'] = pd.to_datetime(df['cohort_date'], errors='coerce')

    # Get the current date (as string, converted to datetime)
    now = pd.to_datetime('today')
    
    # Define the end date (12 months after cohort_date)
    df['end_date'] = df['cohort_date'] + pd.DateOffset(months=period_months)

    # Merge to get the ratings at the 'cohort_date' and the 'end_date' (current date)
    migration_df = pd.merge(
        df, df[['gcdu_id', 'proposed_final_crr', 'cohort_date']], 
        left_on=['gcdu_id', 'end_date'], 
        right_on=['gcdu_id', 'cohort_date'], 
        suffixes=('_start', '_end'), 
        how='inner'
    )

    # Compare the ratings at cohort_date and the end_date
    migration_df['migration_direction'] = np.where(
        migration_df['proposed_final_crr_start'] < migration_df['proposed_final_crr_end'], 'Higher',
        np.where(migration_df['proposed_final_crr_start'] > migration_df['proposed_final_crr_end'], 'Lower', 'No Change')
    )

    # For each month in the cohort_date, calculate the percentage of migrations
    migration_percentages = []
    for month in pd.date_range(migration_df['cohort_date'].min(), now, freq='MS'):  # Start of each month
        # Filter for observations in this month
        month_data = migration_df[migration_df['cohort_date'] == month]
        
        if len(month_data) > 0:
            # Calculate the percentage migrating up, down, or no change
            total_obs = len(month_data)
            higher_percent = (month_data['migration_direction'] == 'Higher').sum() / total_obs * 100
            lower_percent = (month_data['migration_direction'] == 'Lower').sum() / total_obs * 100

            migration_percentages.append([month.strftime('%Y-%m'), higher_percent, lower_percent])
    
    # Convert the results to a DataFrame
    migration_percentages_df = pd.DataFrame(migration_percentages, columns=['Month', 'Migrated Higher (%)', 'Migrated Lower (%)'])

    return migration_percentages_df

# Example usage:
migration_shares = migration_percentages(cohort_data, period_months=12)
print(migration_shares)
