import pandas as pd
import numpy as np

def calculate_pai(df1, df2, variables, bins=5):
    results = []

    for var in variables:
        # Determine if numeric or categorical
        if pd.api.types.is_numeric_dtype(df1[var]):
            combined = pd.concat([df1[[var]], df2[[var]]])
            bin_edges = np.histogram_bin_edges(combined[var].dropna(), bins=bins)

            df1_dist = pd.cut(df1[var], bins=bin_edges, include_lowest=True).value_counts(normalize=True).sort_index()
            df2_dist = pd.cut(df2[var], bins=bin_edges, include_lowest=True).value_counts(normalize=True).sort_index()
        else:
            df1_dist = df1[var].value_counts(normalize=True)
            df2_dist = df2[var].value_counts(normalize=True)

        # Union of all categories
        all_bins = df1_dist.index.union(df2_dist.index)
        df1_dist = df1_dist.reindex(all_bins, fill_value=0.0001)
        df2_dist = df2_dist.reindex(all_bins, fill_value=0.0001)

        # PAI is max of Ai/Bi and Bi/Ai to detect any extreme misalignments
        ratio = df1_dist / df2_dist
        inv_ratio = df2_dist / df1_dist
        pai = max(ratio.max(), inv_ratio.max())

        # Classify
        if pai < 1.1:
            status = "Green"
        elif pai < 1.5:
            status = "Amber"
        else:
            status = "Red"

        results.append({
            'Variable': var,
            'PAI': round(pai, 2),
            'Status': status
        })

    return pd.DataFrame(results)
