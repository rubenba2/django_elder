import pandas as pd
import numpy as np
from scipy.stats import norm

def calculate_homogeneity_by_median(df, rating_var='CRR_group', default_var='DEFAULT_EVENT', score_var='score_var', alpha=0.05):
    """
    For each rating in `rating_var`, this function splits the observations into two groups using the median of `score_var`
    as the threshold, calculates the long-run average default rates (LRA DR) for each group,
    and then performs a two-sample Z-test to compare these rates.
    
    Parameters:
      df          : DataFrame with the data.
      rating_var  : The column name for the rating group (ordered categorical).
      default_var : The binary default indicator column (1 = default, 0 = non-default).
      score_var   : The continuous variable used to split the observations by its median.
      alpha       : Significance level for the test (default=0.05).
      
    Returns:
      A DataFrame summarizing, for each rating in `rating_var`:
          - Total number of observations.
          - The median threshold for `score_var`.
          - DR for observations with `score_var` ≤ median.
          - DR for observations with `score_var` > median.
          - The Z–statistic and corresponding two–sided p–value.
          - A conclusion on homogeneity.
    """
    results = []
    
    # Retrieve groups in order:
    if pd.api.types.is_categorical_dtype(df[rating_var]):
        groups = df[rating_var].cat.categories
    else:
        groups = sorted(df[rating_var].unique())
    
    for grp in groups:
        sub_df = df[df[rating_var] == grp]
        n = len(sub_df)
        
        # Check if we have sufficient observations
        if n < 2:
            results.append({
                'Rating': grp,
                'N': n,
                'Median_Threshold': np.nan,
                'DR_<=median': np.nan,
                'DR_>median': np.nan,
                'Z-stat': np.nan,
                'p-value': np.nan,
                'Homogeneity': 'Insufficient data'
            })
            continue
        
        # Calculate the median of the score_var in this group (threshold for splitting)
        median_threshold = sub_df[score_var].median()
        
        # Split data using the median threshold:
        half1 = sub_df[sub_df[score_var] <= median_threshold]
        half2 = sub_df[sub_df[score_var] > median_threshold]
        n1, n2 = len(half1), len(half2)
        
        # Require both halves to have data.
        if n1 == 0 or n2 == 0:
            results.append({
                'Rating': grp,
                'N': n,
                'Median_Threshold': median_threshold,
                'DR_<=median': np.nan,
                'DR_>median': np.nan,
                'Z-stat': np.nan,
                'p-value': np.nan,
                'Homogeneity': 'Insufficient split'
            })
            continue
        
        # Calculate long-run average default rates in each half
        dr1 = half1[default_var].mean()   # for observations with score_var ≤ median
        dr2 = half2[default_var].mean()   # for observations with score_var > median
        
        # Calculate binomial variances (variance = p*(1-p)/n)
        var1 = dr1 * (1 - dr1) / n1
        var2 = dr2 * (1 - dr2) / n2
        var_sum = var1 + var2
        
        # Compute Z-statistic and corresponding two-sided p-value
        if var_sum > 0:
            z_stat = (dr1 - dr2) / np.sqrt(var_sum)
            p_val = 2 * (1 - norm.cdf(abs(z_stat)))
        else:
            z_stat = np.nan
            p_val = np.nan
        
        # If p-value is >= alpha, we fail to reject the null, so the default rates are statistically similar, i.e. homogeneous.
        homogeneity = "Homogeneous" if p_val >= alpha else "Not Homogeneous"
        
        results.append({
            'Rating': grp,
            'N': n,
            'Median_Threshold': median_threshold,
            'DR_<=median': dr1,
            'DR_>median': dr2,
            'Z-stat': z_stat,
            'p-value': p_val,
            'Homogeneity': homogeneity
        })
    
    return pd.DataFrame(results)

# Example usage:
# Suppose chc_df is your DataFrame and it contains:
#   - CRR_group (rating group, ordered categorical)
#   - DEFAULT_EVENT (binary default indicator)
#   - score_var (the continuous variable to split on)
homogeneity_results = calculate_homogeneity_by_median(
    chc_df,
    rating_var='CRR_group',
    default_var='DEFAULT_EVENT',
    score_var='score_var',
    alpha=0.05
)

print(homogeneity_results)
